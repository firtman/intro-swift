{"pageProps":{"post":{"attributes":{},"html":"<p>We will introduce in the View structure objects that we can use in any place to avoid passing data manually as properties. These are called <code>Environment Objects</code> and we can inject them at any level, but we will do it at the app level.</p>\n<h2 id=\"app-level\">App level</h2>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-meta\">@StateObject</span> <span class=\"hljs-keyword\">var</span> menuManager <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">MenuManager</span>()\n<span class=\"hljs-meta\">@StateObject</span> <span class=\"hljs-keyword\">var</span> cartManager <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">CartManager</span>()\n    \n<span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">Scene</span> {\n    <span class=\"hljs-type\">WindowGroup</span> {\n        <span class=\"hljs-type\">ContentView</span>()\n            .environmentObject(cartManager)\n            .environmentObject(menuManager)\n    }\n}\n</code></pre>\n<p>To make it work, MenuManager and CartManager have to conform to <code>ObservableObject</code> and we should use <code>@Published</code> at the properties we want to bind data to:</p>\n<h2 id=\"cartmanager\">CartManager</h2>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CartManager</span>: <span class=\"hljs-title class_\">ObservableObject</span> {\n    <span class=\"hljs-meta\">@Published</span> <span class=\"hljs-keyword\">var</span> products: [(<span class=\"hljs-type\">Product</span>, <span class=\"hljs-type\">Int</span>)] <span class=\"hljs-operator\">=</span> []\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<h2 id=\"menumanager\">MenuManager</h2>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MenuManager</span>: <span class=\"hljs-title class_\">ObservableObject</span> {  \n    <span class=\"hljs-meta\">@Published</span> <span class=\"hljs-keyword\">var</span> menu: [<span class=\"hljs-type\">Category</span>] <span class=\"hljs-operator\">=</span> []\n}\n</code></pre>\n<p>To use these objects we must declare <code>@EnvironmentObject</code> variables in our views without instanciating these objects (they will be injected), such as:</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-meta\">@EnvironmentObject</span> <span class=\"hljs-keyword\">var</span> menuManager: <span class=\"hljs-type\">MenuManager</span>\n</code></pre>\n<p>The MenuPage now can be upgraded into:</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MenuPage</span>: <span class=\"hljs-title class_\">View</span> {\n    \n    <span class=\"hljs-meta\">@EnvironmentObject</span> <span class=\"hljs-keyword\">var</span> menuManager: <span class=\"hljs-type\">MenuManager</span>\n    \n    <span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n        <span class=\"hljs-type\">VStack</span> {\n            <span class=\"hljs-type\">NavigationView</span> {\n                    <span class=\"hljs-type\">List</span> {\n                        <span class=\"hljs-type\">AppTitle</span>()\n                            .padding(.top, <span class=\"hljs-number\">4</span>)\n                        <span class=\"hljs-keyword\">if</span> menuManager.menu.count <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span> {\n                            <span class=\"hljs-type\">HStack</span> {\n                                <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">&quot;We couldn&#x27;t fetch the data&quot;</span>)\n                                <span class=\"hljs-type\">Button</span>(<span class=\"hljs-string\">&quot;Reload&quot;</span>) {\n                                }\n                            }\n                        } <span class=\"hljs-keyword\">else</span> {\n                            <span class=\"hljs-type\">ForEach</span>(menuManager.menu) { category <span class=\"hljs-keyword\">in</span>\n                                <span class=\"hljs-keyword\">if</span> category.products.count <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> {\n                                    <span class=\"hljs-type\">Text</span>(category.name)\n                                    .listRowBackground(<span class=\"hljs-type\">Color</span>(<span class=\"hljs-string\">&quot;Background&quot;</span>))\n                                    .foregroundColor(<span class=\"hljs-type\">Color</span>(<span class=\"hljs-string\">&quot;Secondary&quot;</span>))\n                                    .padding()\n                                }\n                                \n                                <span class=\"hljs-type\">ForEach</span>(category.products) { item <span class=\"hljs-keyword\">in</span>\n                                    <span class=\"hljs-type\">ZStack</span> {\n                                        <span class=\"hljs-type\">NavigationLink</span>(destination: <span class=\"hljs-type\">DetailsPage</span>(product: item)) {\n                                            <span class=\"hljs-type\">EmptyView</span>()\n                                        }.opacity(<span class=\"hljs-number\">0</span>)\n                                        <span class=\"hljs-type\">ProductItem</span>(product: item)\n                                            .padding(.top)\n                                            .padding(.leading)\n                                            .padding(.bottom, <span class=\"hljs-number\">12</span>)\n\n                                    }\n                                    \n                                }\n                            }\n                            .listRowInsets(<span class=\"hljs-type\">EdgeInsets</span>(top: <span class=\"hljs-number\">0</span>, leading: <span class=\"hljs-number\">0</span>, bottom: <span class=\"hljs-number\">0</span>, trailing: <span class=\"hljs-number\">0</span>))\n                            .listRowSeparator(.hidden)\n                            .listRowBackground(<span class=\"hljs-type\">Color</span>(<span class=\"hljs-string\">&quot;Background&quot;</span>))\n                        }\n                    }\n                    .listStyle(.insetGrouped)\n                    .navigationTitle(<span class=\"hljs-string\">&quot;Products&quot;</span>)\n                    .background(<span class=\"hljs-type\">Color</span>(<span class=\"hljs-string\">&quot;SurfaceBackground&quot;</span>))                    \n            }\n        }\n        .navigationViewStyle(<span class=\"hljs-type\">StackNavigationViewStyle</span>())\n    }\n}\n</code></pre>\n<h2 id=\"identifiable-types\">Identifiable Types</h2>\n<p>We will have to conform to Identifiable on Product and Category structs</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Product</span>: <span class=\"hljs-title class_\">Identifiable</span> {\n    <span class=\"hljs-keyword\">var</span> id: <span class=\"hljs-type\">Int</span>\n    <span class=\"hljs-keyword\">var</span> name: <span class=\"hljs-type\">String</span>\n    <span class=\"hljs-keyword\">var</span> description: <span class=\"hljs-type\">String</span>?\n    <span class=\"hljs-keyword\">var</span> price: <span class=\"hljs-type\">Double</span>\n    <span class=\"hljs-keyword\">var</span> image: <span class=\"hljs-type\">String</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>\n    \n    <span class=\"hljs-keyword\">var</span> imageURL: <span class=\"hljs-type\">URL</span> {\n        <span class=\"hljs-type\">URL</span>(string: <span class=\"hljs-string\">&quot;https://firtman.github.io/coffeemasters/api/images/<span class=\"hljs-subst\">\\(<span class=\"hljs-keyword\">self</span>.image)</span>&quot;</span>)<span class=\"hljs-operator\">!</span>\n    }\n}\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Category</span>: <span class=\"hljs-title class_\">Identifiable</span> {\n    <span class=\"hljs-keyword\">var</span> id: <span class=\"hljs-type\">String</span> { name }\n    <span class=\"hljs-keyword\">var</span> name: <span class=\"hljs-type\">String</span>\n    <span class=\"hljs-keyword\">var</span> products: [<span class=\"hljs-type\">Product</span>] <span class=\"hljs-operator\">=</span> []\n}\n</code></pre>\n","slug":"using-environment-objects","title":"Using Environment Objects","section":"Working with Data","icon":"database","filePath":"/home/runner/work/intro-swift/intro-swift/lessons/05-working-with-data/C-using-environment-objects.md","nextSlug":"/intro-swift/lessons/working-with-data/creating-the-cart","prevSlug":"/intro-swift/lessons/working-with-data/creating-data-managers"}},"__N_SSG":true}